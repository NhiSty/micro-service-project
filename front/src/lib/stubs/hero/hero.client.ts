// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "hero/hero.proto" (package "hero", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { HeroCRUDService } from "./hero";
import type { DeleteResponse } from "./hero";
import type { DeleteRequest } from "./hero";
import type { UpdateResponse } from "./hero";
import type { UpdateRequest } from "./hero";
import type { CreateResponse } from "./hero";
import type { CreateRequest } from "./hero";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetResponse } from "./hero";
import type { GetRequest } from "./hero";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service hero.HeroCRUDService
 */
export interface IHeroCRUDServiceClient {
    /**
     * @generated from protobuf rpc: Get(hero.GetRequest) returns (hero.GetResponse);
     */
    get(input: GetRequest, options?: RpcOptions): UnaryCall<GetRequest, GetResponse>;
    /**
     * @generated from protobuf rpc: Create(hero.CreateRequest) returns (hero.CreateResponse);
     */
    create(input: CreateRequest, options?: RpcOptions): UnaryCall<CreateRequest, CreateResponse>;
    /**
     * @generated from protobuf rpc: Update(hero.UpdateRequest) returns (hero.UpdateResponse);
     */
    update(input: UpdateRequest, options?: RpcOptions): UnaryCall<UpdateRequest, UpdateResponse>;
    /**
     * @generated from protobuf rpc: Delete(hero.DeleteRequest) returns (hero.DeleteResponse);
     */
    delete(input: DeleteRequest, options?: RpcOptions): UnaryCall<DeleteRequest, DeleteResponse>;
}
/**
 * @generated from protobuf service hero.HeroCRUDService
 */
export class HeroCRUDServiceClient implements IHeroCRUDServiceClient, ServiceInfo {
    typeName = HeroCRUDService.typeName;
    methods = HeroCRUDService.methods;
    options = HeroCRUDService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Get(hero.GetRequest) returns (hero.GetResponse);
     */
    get(input: GetRequest, options?: RpcOptions): UnaryCall<GetRequest, GetResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetRequest, GetResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Create(hero.CreateRequest) returns (hero.CreateResponse);
     */
    create(input: CreateRequest, options?: RpcOptions): UnaryCall<CreateRequest, CreateResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateRequest, CreateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Update(hero.UpdateRequest) returns (hero.UpdateResponse);
     */
    update(input: UpdateRequest, options?: RpcOptions): UnaryCall<UpdateRequest, UpdateResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateRequest, UpdateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Delete(hero.DeleteRequest) returns (hero.DeleteResponse);
     */
    delete(input: DeleteRequest, options?: RpcOptions): UnaryCall<DeleteRequest, DeleteResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteRequest, DeleteResponse>("unary", this._transport, method, opt, input);
    }
}
