// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "hotel/service.proto" (package "hotel", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { HotelCRUDService } from "./service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { FindResponse } from "./hotel";
import type { FindRequest } from "./hotel";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service hotel.HotelCRUDService
 */
export interface IHotelCRUDServiceClient {
    /**
     * @generated from protobuf rpc: Find(hotel.FindRequest) returns (hotel.FindResponse);
     */
    find(input: FindRequest, options?: RpcOptions): UnaryCall<FindRequest, FindResponse>;
}
/**
 * @generated from protobuf service hotel.HotelCRUDService
 */
export class HotelCRUDServiceClient implements IHotelCRUDServiceClient, ServiceInfo {
    typeName = HotelCRUDService.typeName;
    methods = HotelCRUDService.methods;
    options = HotelCRUDService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Find(hotel.FindRequest) returns (hotel.FindResponse);
     */
    find(input: FindRequest, options?: RpcOptions): UnaryCall<FindRequest, FindResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<FindRequest, FindResponse>("unary", this._transport, method, opt, input);
    }
}
