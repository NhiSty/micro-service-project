// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "hotel/hotel.proto" (package "hotel", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { HotelCRUDService } from "./hotel";
import type { DeleteHotelResponse } from "./hotel";
import type { DeleteHotelRequest } from "./hotel";
import type { UpdateHotelResponse } from "./hotel";
import type { UpdateHotelRequest } from "./hotel";
import type { CreateHotelResponse } from "./hotel";
import type { CreateHotelRequest } from "./hotel";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { FindResponse } from "./hotel";
import type { FindRequest } from "./hotel";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service hotel.HotelCRUDService
 */
export interface IHotelCRUDServiceClient {
    /**
     * @generated from protobuf rpc: Find(hotel.FindRequest) returns (hotel.FindResponse);
     */
    find(input: FindRequest, options?: RpcOptions): UnaryCall<FindRequest, FindResponse>;
    /**
     * @generated from protobuf rpc: Create(hotel.CreateHotelRequest) returns (hotel.CreateHotelResponse);
     */
    create(input: CreateHotelRequest, options?: RpcOptions): UnaryCall<CreateHotelRequest, CreateHotelResponse>;
    /**
     * @generated from protobuf rpc: Update(hotel.UpdateHotelRequest) returns (hotel.UpdateHotelResponse);
     */
    update(input: UpdateHotelRequest, options?: RpcOptions): UnaryCall<UpdateHotelRequest, UpdateHotelResponse>;
    /**
     * @generated from protobuf rpc: Delete(hotel.DeleteHotelRequest) returns (hotel.DeleteHotelResponse);
     */
    delete(input: DeleteHotelRequest, options?: RpcOptions): UnaryCall<DeleteHotelRequest, DeleteHotelResponse>;
}
/**
 * @generated from protobuf service hotel.HotelCRUDService
 */
export class HotelCRUDServiceClient implements IHotelCRUDServiceClient, ServiceInfo {
    typeName = HotelCRUDService.typeName;
    methods = HotelCRUDService.methods;
    options = HotelCRUDService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Find(hotel.FindRequest) returns (hotel.FindResponse);
     */
    find(input: FindRequest, options?: RpcOptions): UnaryCall<FindRequest, FindResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<FindRequest, FindResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Create(hotel.CreateHotelRequest) returns (hotel.CreateHotelResponse);
     */
    create(input: CreateHotelRequest, options?: RpcOptions): UnaryCall<CreateHotelRequest, CreateHotelResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateHotelRequest, CreateHotelResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Update(hotel.UpdateHotelRequest) returns (hotel.UpdateHotelResponse);
     */
    update(input: UpdateHotelRequest, options?: RpcOptions): UnaryCall<UpdateHotelRequest, UpdateHotelResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateHotelRequest, UpdateHotelResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Delete(hotel.DeleteHotelRequest) returns (hotel.DeleteHotelResponse);
     */
    delete(input: DeleteHotelRequest, options?: RpcOptions): UnaryCall<DeleteHotelRequest, DeleteHotelResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteHotelRequest, DeleteHotelResponse>("unary", this._transport, method, opt, input);
    }
}
