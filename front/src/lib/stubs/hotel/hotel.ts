// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "hotel/hotel.proto" (package "hotel", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message hotel.Hotel
 */
export interface Hotel {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string address = 3;
     */
    address: string;
    /**
     * @generated from protobuf field: string city = 4;
     */
    city: string;
    /**
     * @generated from protobuf field: string country = 5;
     */
    country: string;
    /**
     * @generated from protobuf field: repeated hotel.HotelRoom rooms = 6;
     */
    rooms: HotelRoom[];
}
/**
 * @generated from protobuf message hotel.HotelRoom
 */
export interface HotelRoom {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: int32 roomNumber = 2;
     */
    roomNumber: number;
    /**
     * @generated from protobuf field: bool available = 3;
     */
    available: boolean;
    /**
     * @generated from protobuf field: int32 hotelId = 4;
     */
    hotelId: number;
}
/**
 * @generated from protobuf message hotel.FindRequest
 */
export interface FindRequest {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
}
/**
 * @generated from protobuf message hotel.FindResponse
 */
export interface FindResponse {
    /**
     * @generated from protobuf field: repeated hotel.Hotel hotels = 1;
     */
    hotels: Hotel[];
}
/**
 * @generated from protobuf message hotel.CreateHotelRequest
 */
export interface CreateHotelRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string address = 2;
     */
    address: string;
    /**
     * @generated from protobuf field: string city = 3;
     */
    city: string;
    /**
     * @generated from protobuf field: string country = 4;
     */
    country: string;
    /**
     * @generated from protobuf field: repeated hotel.HotelRoom rooms = 5;
     */
    rooms: HotelRoom[];
}
/**
 * @generated from protobuf message hotel.CreateHotelResponse
 */
export interface CreateHotelResponse {
    /**
     * @generated from protobuf field: hotel.Hotel hotel = 1;
     */
    hotel?: Hotel;
}
/**
 * @generated from protobuf message hotel.UpdateHotelRequest
 */
export interface UpdateHotelRequest {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string address = 3;
     */
    address: string;
    /**
     * @generated from protobuf field: string city = 4;
     */
    city: string;
    /**
     * @generated from protobuf field: string country = 5;
     */
    country: string;
}
/**
 * @generated from protobuf message hotel.UpdateHotelResponse
 */
export interface UpdateHotelResponse {
    /**
     * @generated from protobuf field: hotel.Hotel hotel = 1;
     */
    hotel?: Hotel;
}
/**
 * @generated from protobuf message hotel.DeleteHotelRequest
 */
export interface DeleteHotelRequest {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
}
/**
 * @generated from protobuf message hotel.DeleteHotelResponse
 */
export interface DeleteHotelResponse {
    /**
     * @generated from protobuf field: hotel.Hotel hotel = 1;
     */
    hotel?: Hotel;
}
/**
 * @generated from protobuf message hotel.CreateHotelRoomRequest
 */
export interface CreateHotelRoomRequest {
    /**
     * @generated from protobuf field: int32 hotelId = 1;
     */
    hotelId: number;
    /**
     * @generated from protobuf field: int32 roomNumber = 2;
     */
    roomNumber: number;
}
/**
 * @generated from protobuf message hotel.CreateHotelRoomResponse
 */
export interface CreateHotelRoomResponse {
    /**
     * @generated from protobuf field: hotel.HotelRoom hotelRoom = 1;
     */
    hotelRoom?: HotelRoom;
}
// @generated message type with reflection information, may provide speed optimized methods
class Hotel$Type extends MessageType<Hotel> {
    constructor() {
        super("hotel.Hotel", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "city", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "country", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "rooms", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => HotelRoom }
        ]);
    }
    create(value?: PartialMessage<Hotel>): Hotel {
        const message = { id: 0, name: "", address: "", city: "", country: "", rooms: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Hotel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Hotel): Hotel {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string address */ 3:
                    message.address = reader.string();
                    break;
                case /* string city */ 4:
                    message.city = reader.string();
                    break;
                case /* string country */ 5:
                    message.country = reader.string();
                    break;
                case /* repeated hotel.HotelRoom rooms */ 6:
                    message.rooms.push(HotelRoom.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Hotel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string address = 3; */
        if (message.address !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.address);
        /* string city = 4; */
        if (message.city !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.city);
        /* string country = 5; */
        if (message.country !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.country);
        /* repeated hotel.HotelRoom rooms = 6; */
        for (let i = 0; i < message.rooms.length; i++)
            HotelRoom.internalBinaryWrite(message.rooms[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hotel.Hotel
 */
export const Hotel = new Hotel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HotelRoom$Type extends MessageType<HotelRoom> {
    constructor() {
        super("hotel.HotelRoom", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "roomNumber", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "available", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "hotelId", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<HotelRoom>): HotelRoom {
        const message = { id: 0, roomNumber: 0, available: false, hotelId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HotelRoom>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HotelRoom): HotelRoom {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* int32 roomNumber */ 2:
                    message.roomNumber = reader.int32();
                    break;
                case /* bool available */ 3:
                    message.available = reader.bool();
                    break;
                case /* int32 hotelId */ 4:
                    message.hotelId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HotelRoom, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* int32 roomNumber = 2; */
        if (message.roomNumber !== 0)
            writer.tag(2, WireType.Varint).int32(message.roomNumber);
        /* bool available = 3; */
        if (message.available !== false)
            writer.tag(3, WireType.Varint).bool(message.available);
        /* int32 hotelId = 4; */
        if (message.hotelId !== 0)
            writer.tag(4, WireType.Varint).int32(message.hotelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hotel.HotelRoom
 */
export const HotelRoom = new HotelRoom$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FindRequest$Type extends MessageType<FindRequest> {
    constructor() {
        super("hotel.FindRequest", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FindRequest>): FindRequest {
        const message = { id: 0, name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FindRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FindRequest): FindRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FindRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hotel.FindRequest
 */
export const FindRequest = new FindRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FindResponse$Type extends MessageType<FindResponse> {
    constructor() {
        super("hotel.FindResponse", [
            { no: 1, name: "hotels", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Hotel }
        ]);
    }
    create(value?: PartialMessage<FindResponse>): FindResponse {
        const message = { hotels: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FindResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FindResponse): FindResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated hotel.Hotel hotels */ 1:
                    message.hotels.push(Hotel.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FindResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated hotel.Hotel hotels = 1; */
        for (let i = 0; i < message.hotels.length; i++)
            Hotel.internalBinaryWrite(message.hotels[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hotel.FindResponse
 */
export const FindResponse = new FindResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateHotelRequest$Type extends MessageType<CreateHotelRequest> {
    constructor() {
        super("hotel.CreateHotelRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "city", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "country", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "rooms", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => HotelRoom }
        ]);
    }
    create(value?: PartialMessage<CreateHotelRequest>): CreateHotelRequest {
        const message = { name: "", address: "", city: "", country: "", rooms: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateHotelRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateHotelRequest): CreateHotelRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string address */ 2:
                    message.address = reader.string();
                    break;
                case /* string city */ 3:
                    message.city = reader.string();
                    break;
                case /* string country */ 4:
                    message.country = reader.string();
                    break;
                case /* repeated hotel.HotelRoom rooms */ 5:
                    message.rooms.push(HotelRoom.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateHotelRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string address = 2; */
        if (message.address !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.address);
        /* string city = 3; */
        if (message.city !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.city);
        /* string country = 4; */
        if (message.country !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.country);
        /* repeated hotel.HotelRoom rooms = 5; */
        for (let i = 0; i < message.rooms.length; i++)
            HotelRoom.internalBinaryWrite(message.rooms[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hotel.CreateHotelRequest
 */
export const CreateHotelRequest = new CreateHotelRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateHotelResponse$Type extends MessageType<CreateHotelResponse> {
    constructor() {
        super("hotel.CreateHotelResponse", [
            { no: 1, name: "hotel", kind: "message", T: () => Hotel }
        ]);
    }
    create(value?: PartialMessage<CreateHotelResponse>): CreateHotelResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateHotelResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateHotelResponse): CreateHotelResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* hotel.Hotel hotel */ 1:
                    message.hotel = Hotel.internalBinaryRead(reader, reader.uint32(), options, message.hotel);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateHotelResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* hotel.Hotel hotel = 1; */
        if (message.hotel)
            Hotel.internalBinaryWrite(message.hotel, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hotel.CreateHotelResponse
 */
export const CreateHotelResponse = new CreateHotelResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateHotelRequest$Type extends MessageType<UpdateHotelRequest> {
    constructor() {
        super("hotel.UpdateHotelRequest", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "city", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "country", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateHotelRequest>): UpdateHotelRequest {
        const message = { id: 0, name: "", address: "", city: "", country: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateHotelRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateHotelRequest): UpdateHotelRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string address */ 3:
                    message.address = reader.string();
                    break;
                case /* string city */ 4:
                    message.city = reader.string();
                    break;
                case /* string country */ 5:
                    message.country = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateHotelRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string address = 3; */
        if (message.address !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.address);
        /* string city = 4; */
        if (message.city !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.city);
        /* string country = 5; */
        if (message.country !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.country);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hotel.UpdateHotelRequest
 */
export const UpdateHotelRequest = new UpdateHotelRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateHotelResponse$Type extends MessageType<UpdateHotelResponse> {
    constructor() {
        super("hotel.UpdateHotelResponse", [
            { no: 1, name: "hotel", kind: "message", T: () => Hotel }
        ]);
    }
    create(value?: PartialMessage<UpdateHotelResponse>): UpdateHotelResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateHotelResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateHotelResponse): UpdateHotelResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* hotel.Hotel hotel */ 1:
                    message.hotel = Hotel.internalBinaryRead(reader, reader.uint32(), options, message.hotel);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateHotelResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* hotel.Hotel hotel = 1; */
        if (message.hotel)
            Hotel.internalBinaryWrite(message.hotel, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hotel.UpdateHotelResponse
 */
export const UpdateHotelResponse = new UpdateHotelResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteHotelRequest$Type extends MessageType<DeleteHotelRequest> {
    constructor() {
        super("hotel.DeleteHotelRequest", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteHotelRequest>): DeleteHotelRequest {
        const message = { id: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteHotelRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteHotelRequest): DeleteHotelRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteHotelRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hotel.DeleteHotelRequest
 */
export const DeleteHotelRequest = new DeleteHotelRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteHotelResponse$Type extends MessageType<DeleteHotelResponse> {
    constructor() {
        super("hotel.DeleteHotelResponse", [
            { no: 1, name: "hotel", kind: "message", T: () => Hotel }
        ]);
    }
    create(value?: PartialMessage<DeleteHotelResponse>): DeleteHotelResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteHotelResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteHotelResponse): DeleteHotelResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* hotel.Hotel hotel */ 1:
                    message.hotel = Hotel.internalBinaryRead(reader, reader.uint32(), options, message.hotel);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteHotelResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* hotel.Hotel hotel = 1; */
        if (message.hotel)
            Hotel.internalBinaryWrite(message.hotel, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hotel.DeleteHotelResponse
 */
export const DeleteHotelResponse = new DeleteHotelResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateHotelRoomRequest$Type extends MessageType<CreateHotelRoomRequest> {
    constructor() {
        super("hotel.CreateHotelRoomRequest", [
            { no: 1, name: "hotelId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "roomNumber", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CreateHotelRoomRequest>): CreateHotelRoomRequest {
        const message = { hotelId: 0, roomNumber: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateHotelRoomRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateHotelRoomRequest): CreateHotelRoomRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 hotelId */ 1:
                    message.hotelId = reader.int32();
                    break;
                case /* int32 roomNumber */ 2:
                    message.roomNumber = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateHotelRoomRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 hotelId = 1; */
        if (message.hotelId !== 0)
            writer.tag(1, WireType.Varint).int32(message.hotelId);
        /* int32 roomNumber = 2; */
        if (message.roomNumber !== 0)
            writer.tag(2, WireType.Varint).int32(message.roomNumber);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hotel.CreateHotelRoomRequest
 */
export const CreateHotelRoomRequest = new CreateHotelRoomRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateHotelRoomResponse$Type extends MessageType<CreateHotelRoomResponse> {
    constructor() {
        super("hotel.CreateHotelRoomResponse", [
            { no: 1, name: "hotelRoom", kind: "message", T: () => HotelRoom }
        ]);
    }
    create(value?: PartialMessage<CreateHotelRoomResponse>): CreateHotelRoomResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateHotelRoomResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateHotelRoomResponse): CreateHotelRoomResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* hotel.HotelRoom hotelRoom */ 1:
                    message.hotelRoom = HotelRoom.internalBinaryRead(reader, reader.uint32(), options, message.hotelRoom);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateHotelRoomResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* hotel.HotelRoom hotelRoom = 1; */
        if (message.hotelRoom)
            HotelRoom.internalBinaryWrite(message.hotelRoom, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hotel.CreateHotelRoomResponse
 */
export const CreateHotelRoomResponse = new CreateHotelRoomResponse$Type();
/**
 * @generated ServiceType for protobuf service hotel.HotelCRUDService
 */
export const HotelCRUDService = new ServiceType("hotel.HotelCRUDService", [
    { name: "Find", options: {}, I: FindRequest, O: FindResponse },
    { name: "Create", options: {}, I: CreateHotelRequest, O: CreateHotelResponse },
    { name: "Update", options: {}, I: UpdateHotelRequest, O: UpdateHotelResponse },
    { name: "Delete", options: {}, I: DeleteHotelRequest, O: DeleteHotelResponse }
]);
