// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "hotel/v1beta/hotel.proto" (package "hotel.v1beta", syntax proto3)
// tslint:disable
import { UsageService } from "./hotel";
import type { UsageResponse } from "./hotel";
import type { UsageRequest } from "./hotel";
import { FieldService } from "./hotel";
import type { RemoveFieldRequest } from "./hotel";
import type { AddFieldRequest } from "./hotel";
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { HotelService } from "./hotel";
import type { StreamHotelsResponse } from "./hotel";
import type { StreamHotelsRequest } from "./hotel";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { UpdateDateRequest } from "./hotel";
import type { DeleteHotelRequest } from "./hotel";
import type { UpdateHotelRequest } from "./hotel";
import type { CreateHotelRequest } from "./hotel";
import type { HotelResponse } from "./hotel";
import type { GetHotelRequest } from "./hotel";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ListHotelsResponse } from "./hotel";
import type { ListHotelsRequest } from "./hotel";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service hotel.v1beta.HotelService
 */
export interface IHotelServiceClient {
    /**
     * @generated from protobuf rpc: ListHotels(hotel.v1beta.ListHotelsRequest) returns (hotel.v1beta.ListHotelsResponse);
     */
    listHotels(input: ListHotelsRequest, options?: RpcOptions): UnaryCall<ListHotelsRequest, ListHotelsResponse>;
    /**
     * @generated from protobuf rpc: GetHotel(hotel.v1beta.GetHotelRequest) returns (hotel.v1beta.HotelResponse);
     */
    getHotel(input: GetHotelRequest, options?: RpcOptions): UnaryCall<GetHotelRequest, HotelResponse>;
    /**
     * @generated from protobuf rpc: CreateHotel(hotel.v1beta.CreateHotelRequest) returns (hotel.v1beta.HotelResponse);
     */
    createHotel(input: CreateHotelRequest, options?: RpcOptions): UnaryCall<CreateHotelRequest, HotelResponse>;
    /**
     * @generated from protobuf rpc: UpdateHotel(hotel.v1beta.UpdateHotelRequest) returns (hotel.v1beta.HotelResponse);
     */
    updateHotel(input: UpdateHotelRequest, options?: RpcOptions): UnaryCall<UpdateHotelRequest, HotelResponse>;
    /**
     * @generated from protobuf rpc: DeleteHotel(hotel.v1beta.DeleteHotelRequest) returns (hotel.v1beta.HotelResponse);
     */
    deleteHotel(input: DeleteHotelRequest, options?: RpcOptions): UnaryCall<DeleteHotelRequest, HotelResponse>;
    /**
     * @generated from protobuf rpc: UpdateDate(hotel.v1beta.UpdateDateRequest) returns (hotel.v1beta.HotelResponse);
     */
    updateDate(input: UpdateDateRequest, options?: RpcOptions): UnaryCall<UpdateDateRequest, HotelResponse>;
    /**
     * @generated from protobuf rpc: StreamHotels(hotel.v1beta.StreamHotelsRequest) returns (stream hotel.v1beta.StreamHotelsResponse);
     */
    streamHotels(input: StreamHotelsRequest, options?: RpcOptions): ServerStreamingCall<StreamHotelsRequest, StreamHotelsResponse>;
}
/**
 * @generated from protobuf service hotel.v1beta.HotelService
 */
export class HotelServiceClient implements IHotelServiceClient, ServiceInfo {
    typeName = HotelService.typeName;
    methods = HotelService.methods;
    options = HotelService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: ListHotels(hotel.v1beta.ListHotelsRequest) returns (hotel.v1beta.ListHotelsResponse);
     */
    listHotels(input: ListHotelsRequest, options?: RpcOptions): UnaryCall<ListHotelsRequest, ListHotelsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListHotelsRequest, ListHotelsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetHotel(hotel.v1beta.GetHotelRequest) returns (hotel.v1beta.HotelResponse);
     */
    getHotel(input: GetHotelRequest, options?: RpcOptions): UnaryCall<GetHotelRequest, HotelResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetHotelRequest, HotelResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateHotel(hotel.v1beta.CreateHotelRequest) returns (hotel.v1beta.HotelResponse);
     */
    createHotel(input: CreateHotelRequest, options?: RpcOptions): UnaryCall<CreateHotelRequest, HotelResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateHotelRequest, HotelResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateHotel(hotel.v1beta.UpdateHotelRequest) returns (hotel.v1beta.HotelResponse);
     */
    updateHotel(input: UpdateHotelRequest, options?: RpcOptions): UnaryCall<UpdateHotelRequest, HotelResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateHotelRequest, HotelResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteHotel(hotel.v1beta.DeleteHotelRequest) returns (hotel.v1beta.HotelResponse);
     */
    deleteHotel(input: DeleteHotelRequest, options?: RpcOptions): UnaryCall<DeleteHotelRequest, HotelResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteHotelRequest, HotelResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateDate(hotel.v1beta.UpdateDateRequest) returns (hotel.v1beta.HotelResponse);
     */
    updateDate(input: UpdateDateRequest, options?: RpcOptions): UnaryCall<UpdateDateRequest, HotelResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateDateRequest, HotelResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: StreamHotels(hotel.v1beta.StreamHotelsRequest) returns (stream hotel.v1beta.StreamHotelsResponse);
     */
    streamHotels(input: StreamHotelsRequest, options?: RpcOptions): ServerStreamingCall<StreamHotelsRequest, StreamHotelsResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<StreamHotelsRequest, StreamHotelsResponse>("serverStreaming", this._transport, method, opt, input);
    }
}
/**
 * @generated from protobuf service hotel.v1beta.FieldService
 */
export interface IFieldServiceClient {
    /**
     * @generated from protobuf rpc: AddField(hotel.v1beta.AddFieldRequest) returns (hotel.v1beta.HotelResponse);
     */
    addField(input: AddFieldRequest, options?: RpcOptions): UnaryCall<AddFieldRequest, HotelResponse>;
    /**
     * @generated from protobuf rpc: RemoveField(hotel.v1beta.RemoveFieldRequest) returns (hotel.v1beta.HotelResponse);
     */
    removeField(input: RemoveFieldRequest, options?: RpcOptions): UnaryCall<RemoveFieldRequest, HotelResponse>;
}
/**
 * @generated from protobuf service hotel.v1beta.FieldService
 */
export class FieldServiceClient implements IFieldServiceClient, ServiceInfo {
    typeName = FieldService.typeName;
    methods = FieldService.methods;
    options = FieldService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: AddField(hotel.v1beta.AddFieldRequest) returns (hotel.v1beta.HotelResponse);
     */
    addField(input: AddFieldRequest, options?: RpcOptions): UnaryCall<AddFieldRequest, HotelResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<AddFieldRequest, HotelResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RemoveField(hotel.v1beta.RemoveFieldRequest) returns (hotel.v1beta.HotelResponse);
     */
    removeField(input: RemoveFieldRequest, options?: RpcOptions): UnaryCall<RemoveFieldRequest, HotelResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<RemoveFieldRequest, HotelResponse>("unary", this._transport, method, opt, input);
    }
}
/**
 * @generated from protobuf service hotel.v1beta.UsageService
 */
export interface IUsageServiceClient {
    /**
     * @generated from protobuf rpc: Using(hotel.v1beta.UsageRequest) returns (hotel.v1beta.UsageResponse);
     */
    using(input: UsageRequest, options?: RpcOptions): UnaryCall<UsageRequest, UsageResponse>;
    /**
     * @generated from protobuf rpc: UsingStream(hotel.v1beta.UsageRequest) returns (stream hotel.v1beta.UsageResponse);
     */
    usingStream(input: UsageRequest, options?: RpcOptions): ServerStreamingCall<UsageRequest, UsageResponse>;
}
/**
 * @generated from protobuf service hotel.v1beta.UsageService
 */
export class UsageServiceClient implements IUsageServiceClient, ServiceInfo {
    typeName = UsageService.typeName;
    methods = UsageService.methods;
    options = UsageService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Using(hotel.v1beta.UsageRequest) returns (hotel.v1beta.UsageResponse);
     */
    using(input: UsageRequest, options?: RpcOptions): UnaryCall<UsageRequest, UsageResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<UsageRequest, UsageResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UsingStream(hotel.v1beta.UsageRequest) returns (stream hotel.v1beta.UsageResponse);
     */
    usingStream(input: UsageRequest, options?: RpcOptions): ServerStreamingCall<UsageRequest, UsageResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<UsageRequest, UsageResponse>("serverStreaming", this._transport, method, opt, input);
    }
}
