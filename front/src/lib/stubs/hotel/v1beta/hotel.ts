// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "hotel/v1beta/hotel.proto" (package "hotel.v1beta", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message hotel.v1beta.Hotel
 */
export interface Hotel {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: repeated hotel.v1beta.Field fields = 2;
     */
    fields: Field[];
    /**
     * @generated from protobuf field: string due_date = 3;
     */
    dueDate: string;
    /**
     * @generated from protobuf field: bool done = 4;
     */
    done: boolean;
}
/**
 * @generated from protobuf message hotel.v1beta.Field
 */
export interface Field {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string value = 2;
     */
    value: string;
    /**
     * @generated from protobuf field: hotel.v1beta.FieldType type = 3;
     */
    type: FieldType;
}
/**
 * @generated from protobuf message hotel.v1beta.AddFieldRequest
 */
export interface AddFieldRequest {
    /**
     * @generated from protobuf field: string hotel_name = 1;
     */
    hotelName: string;
    /**
     * @generated from protobuf field: string field_name = 2;
     */
    fieldName: string;
    /**
     * @generated from protobuf field: string field_value = 3;
     */
    fieldValue: string;
    /**
     * @generated from protobuf field: hotel.v1beta.FieldType field_type = 4;
     */
    fieldType: FieldType;
}
/**
 * @generated from protobuf message hotel.v1beta.UpdateDateRequest
 */
export interface UpdateDateRequest {
    /**
     * @generated from protobuf field: string hotel_name = 1;
     */
    hotelName: string;
    /**
     * @generated from protobuf field: string due_date = 2;
     */
    dueDate: string;
}
/**
 * @generated from protobuf message hotel.v1beta.RemoveFieldRequest
 */
export interface RemoveFieldRequest {
    /**
     * @generated from protobuf field: string hotel_name = 1;
     */
    hotelName: string;
    /**
     * @generated from protobuf field: string field_name = 2;
     */
    fieldName: string;
}
/**
 * @generated from protobuf message hotel.v1beta.UsageRequest
 */
export interface UsageRequest {
    /**
     * @generated from protobuf field: string username = 1;
     */
    username: string;
    /**
     * @generated from protobuf field: string hotel_name = 2;
     */
    hotelName: string;
    /**
     * @generated from protobuf field: hotel.v1beta.EventType event_type = 3;
     */
    eventType: EventType;
}
/**
 * @generated from protobuf message hotel.v1beta.UsageResponse
 */
export interface UsageResponse {
    /**
     * @generated from protobuf field: string username = 1;
     */
    username: string;
    /**
     * @generated from protobuf field: string hotel_name = 2;
     */
    hotelName: string;
    /**
     * @generated from protobuf field: hotel.v1beta.EventType event_type = 3;
     */
    eventType: EventType;
}
/**
 * @generated from protobuf message hotel.v1beta.StreamHotelsRequest
 */
export interface StreamHotelsRequest {
}
/**
 * @generated from protobuf message hotel.v1beta.StreamHotelsResponse
 */
export interface StreamHotelsResponse {
    /**
     * @generated from protobuf field: hotel.v1beta.Hotel hotel = 1;
     */
    hotel?: Hotel;
    /**
     * @generated from protobuf field: string event_type = 2;
     */
    eventType: string;
}
/**
 * @generated from protobuf message hotel.v1beta.ListHotelsRequest
 */
export interface ListHotelsRequest {
    /**
     * The parent resource name, for example, "shelves/shelf1"
     *
     * @generated from protobuf field: string parent = 1;
     */
    parent: string;
    /**
     * The maximum number of items to return.
     *
     * @generated from protobuf field: int32 page_size = 2;
     */
    pageSize: number;
    /**
     * The next_page_token value returned from a previous List request, if any.
     *
     * @generated from protobuf field: string page_token = 3;
     */
    pageToken: string;
}
/**
 * @generated from protobuf message hotel.v1beta.ListHotelsResponse
 */
export interface ListHotelsResponse {
    /**
     * The field name should match the noun "Hotel" in the method name.
     * There will be a maximum number of items returned based on the page_size field in the request.
     *
     * @generated from protobuf field: repeated hotel.v1beta.Hotel hotels = 1;
     */
    hotels: Hotel[];
    /**
     * Token to retrieve the next page of results, or empty if there are no more results in the list.
     *
     * @generated from protobuf field: string next_page_token = 2;
     */
    nextPageToken: string;
}
/**
 * @generated from protobuf message hotel.v1beta.GetHotelRequest
 */
export interface GetHotelRequest {
    /**
     * The field will contain name of the resource requested.
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
}
/**
 * @generated from protobuf message hotel.v1beta.HotelResponse
 */
export interface HotelResponse {
    /**
     * @generated from protobuf field: hotel.v1beta.Hotel hotel = 1;
     */
    hotel?: Hotel;
}
/**
 * @generated from protobuf message hotel.v1beta.CreateHotelRequest
 */
export interface CreateHotelRequest {
    /**
     * The parent resource name where the Hotel is to be created.
     *
     * @generated from protobuf field: string parent = 1;
     */
    parent: string;
    /**
     * The Hotel id to use for this Hotel.
     *
     * @generated from protobuf field: string hotel_id = 2;
     */
    hotelId: string;
    /**
     * The Hotel resource to create.
     * The field name should match the Noun in the method name.
     *
     * @generated from protobuf field: hotel.v1beta.Hotel hotel = 3;
     */
    hotel?: Hotel;
}
/**
 * @generated from protobuf message hotel.v1beta.UpdateHotelRequest
 */
export interface UpdateHotelRequest {
    /**
     * The Hotel resource which replaces the resource on the server.
     *
     * @generated from protobuf field: hotel.v1beta.Hotel hotel = 1;
     */
    hotel?: Hotel;
}
/**
 * @generated from protobuf message hotel.v1beta.DeleteHotelRequest
 */
export interface DeleteHotelRequest {
    /**
     * The resource name of the Hotel to be deleted.
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
}
/**
 * @generated from protobuf enum hotel.v1beta.FieldType
 */
export enum FieldType {
    /**
     * @generated from protobuf enum value: FIELD_TYPE_STRING = 0;
     */
    STRING = 0
}
/**
 * @generated from protobuf enum hotel.v1beta.EventType
 */
export enum EventType {
    /**
     * @generated from protobuf enum value: EVENT_TYPE_CLICK = 0;
     */
    CLICK = 0,
    /**
     * @generated from protobuf enum value: EVENT_TYPE_CREATE = 1;
     */
    CREATE = 1,
    /**
     * @generated from protobuf enum value: EVENT_TYPE_UPDATE = 2;
     */
    UPDATE = 2,
    /**
     * @generated from protobuf enum value: EVENT_TYPE_DELETE = 3;
     */
    DELETE = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class Hotel$Type extends MessageType<Hotel> {
    constructor() {
        super("hotel.v1beta.Hotel", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "fields", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Field },
            { no: 3, name: "due_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "done", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<Hotel>): Hotel {
        const message = { name: "", fields: [], dueDate: "", done: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Hotel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Hotel): Hotel {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* repeated hotel.v1beta.Field fields */ 2:
                    message.fields.push(Field.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string due_date */ 3:
                    message.dueDate = reader.string();
                    break;
                case /* bool done */ 4:
                    message.done = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Hotel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* repeated hotel.v1beta.Field fields = 2; */
        for (let i = 0; i < message.fields.length; i++)
            Field.internalBinaryWrite(message.fields[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string due_date = 3; */
        if (message.dueDate !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.dueDate);
        /* bool done = 4; */
        if (message.done !== false)
            writer.tag(4, WireType.Varint).bool(message.done);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hotel.v1beta.Hotel
 */
export const Hotel = new Hotel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Field$Type extends MessageType<Field> {
    constructor() {
        super("hotel.v1beta.Field", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "type", kind: "enum", T: () => ["hotel.v1beta.FieldType", FieldType, "FIELD_TYPE_"] }
        ]);
    }
    create(value?: PartialMessage<Field>): Field {
        const message = { name: "", value: "", type: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Field>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Field): Field {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string value */ 2:
                    message.value = reader.string();
                    break;
                case /* hotel.v1beta.FieldType type */ 3:
                    message.type = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Field, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string value = 2; */
        if (message.value !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.value);
        /* hotel.v1beta.FieldType type = 3; */
        if (message.type !== 0)
            writer.tag(3, WireType.Varint).int32(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hotel.v1beta.Field
 */
export const Field = new Field$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddFieldRequest$Type extends MessageType<AddFieldRequest> {
    constructor() {
        super("hotel.v1beta.AddFieldRequest", [
            { no: 1, name: "hotel_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "field_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "field_value", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "field_type", kind: "enum", T: () => ["hotel.v1beta.FieldType", FieldType, "FIELD_TYPE_"] }
        ]);
    }
    create(value?: PartialMessage<AddFieldRequest>): AddFieldRequest {
        const message = { hotelName: "", fieldName: "", fieldValue: "", fieldType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AddFieldRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddFieldRequest): AddFieldRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string hotel_name */ 1:
                    message.hotelName = reader.string();
                    break;
                case /* string field_name */ 2:
                    message.fieldName = reader.string();
                    break;
                case /* string field_value */ 3:
                    message.fieldValue = reader.string();
                    break;
                case /* hotel.v1beta.FieldType field_type */ 4:
                    message.fieldType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddFieldRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string hotel_name = 1; */
        if (message.hotelName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.hotelName);
        /* string field_name = 2; */
        if (message.fieldName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.fieldName);
        /* string field_value = 3; */
        if (message.fieldValue !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.fieldValue);
        /* hotel.v1beta.FieldType field_type = 4; */
        if (message.fieldType !== 0)
            writer.tag(4, WireType.Varint).int32(message.fieldType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hotel.v1beta.AddFieldRequest
 */
export const AddFieldRequest = new AddFieldRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateDateRequest$Type extends MessageType<UpdateDateRequest> {
    constructor() {
        super("hotel.v1beta.UpdateDateRequest", [
            { no: 1, name: "hotel_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "due_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateDateRequest>): UpdateDateRequest {
        const message = { hotelName: "", dueDate: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateDateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateDateRequest): UpdateDateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string hotel_name */ 1:
                    message.hotelName = reader.string();
                    break;
                case /* string due_date */ 2:
                    message.dueDate = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateDateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string hotel_name = 1; */
        if (message.hotelName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.hotelName);
        /* string due_date = 2; */
        if (message.dueDate !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.dueDate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hotel.v1beta.UpdateDateRequest
 */
export const UpdateDateRequest = new UpdateDateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveFieldRequest$Type extends MessageType<RemoveFieldRequest> {
    constructor() {
        super("hotel.v1beta.RemoveFieldRequest", [
            { no: 1, name: "hotel_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "field_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RemoveFieldRequest>): RemoveFieldRequest {
        const message = { hotelName: "", fieldName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RemoveFieldRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveFieldRequest): RemoveFieldRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string hotel_name */ 1:
                    message.hotelName = reader.string();
                    break;
                case /* string field_name */ 2:
                    message.fieldName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveFieldRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string hotel_name = 1; */
        if (message.hotelName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.hotelName);
        /* string field_name = 2; */
        if (message.fieldName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.fieldName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hotel.v1beta.RemoveFieldRequest
 */
export const RemoveFieldRequest = new RemoveFieldRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UsageRequest$Type extends MessageType<UsageRequest> {
    constructor() {
        super("hotel.v1beta.UsageRequest", [
            { no: 1, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "hotel_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "event_type", kind: "enum", T: () => ["hotel.v1beta.EventType", EventType, "EVENT_TYPE_"] }
        ]);
    }
    create(value?: PartialMessage<UsageRequest>): UsageRequest {
        const message = { username: "", hotelName: "", eventType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UsageRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UsageRequest): UsageRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string username */ 1:
                    message.username = reader.string();
                    break;
                case /* string hotel_name */ 2:
                    message.hotelName = reader.string();
                    break;
                case /* hotel.v1beta.EventType event_type */ 3:
                    message.eventType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UsageRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string username = 1; */
        if (message.username !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.username);
        /* string hotel_name = 2; */
        if (message.hotelName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.hotelName);
        /* hotel.v1beta.EventType event_type = 3; */
        if (message.eventType !== 0)
            writer.tag(3, WireType.Varint).int32(message.eventType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hotel.v1beta.UsageRequest
 */
export const UsageRequest = new UsageRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UsageResponse$Type extends MessageType<UsageResponse> {
    constructor() {
        super("hotel.v1beta.UsageResponse", [
            { no: 1, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "hotel_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "event_type", kind: "enum", T: () => ["hotel.v1beta.EventType", EventType, "EVENT_TYPE_"] }
        ]);
    }
    create(value?: PartialMessage<UsageResponse>): UsageResponse {
        const message = { username: "", hotelName: "", eventType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UsageResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UsageResponse): UsageResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string username */ 1:
                    message.username = reader.string();
                    break;
                case /* string hotel_name */ 2:
                    message.hotelName = reader.string();
                    break;
                case /* hotel.v1beta.EventType event_type */ 3:
                    message.eventType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UsageResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string username = 1; */
        if (message.username !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.username);
        /* string hotel_name = 2; */
        if (message.hotelName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.hotelName);
        /* hotel.v1beta.EventType event_type = 3; */
        if (message.eventType !== 0)
            writer.tag(3, WireType.Varint).int32(message.eventType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hotel.v1beta.UsageResponse
 */
export const UsageResponse = new UsageResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamHotelsRequest$Type extends MessageType<StreamHotelsRequest> {
    constructor() {
        super("hotel.v1beta.StreamHotelsRequest", []);
    }
    create(value?: PartialMessage<StreamHotelsRequest>): StreamHotelsRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StreamHotelsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamHotelsRequest): StreamHotelsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: StreamHotelsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hotel.v1beta.StreamHotelsRequest
 */
export const StreamHotelsRequest = new StreamHotelsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamHotelsResponse$Type extends MessageType<StreamHotelsResponse> {
    constructor() {
        super("hotel.v1beta.StreamHotelsResponse", [
            { no: 1, name: "hotel", kind: "message", T: () => Hotel },
            { no: 2, name: "event_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StreamHotelsResponse>): StreamHotelsResponse {
        const message = { eventType: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StreamHotelsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamHotelsResponse): StreamHotelsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* hotel.v1beta.Hotel hotel */ 1:
                    message.hotel = Hotel.internalBinaryRead(reader, reader.uint32(), options, message.hotel);
                    break;
                case /* string event_type */ 2:
                    message.eventType = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamHotelsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* hotel.v1beta.Hotel hotel = 1; */
        if (message.hotel)
            Hotel.internalBinaryWrite(message.hotel, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string event_type = 2; */
        if (message.eventType !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.eventType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hotel.v1beta.StreamHotelsResponse
 */
export const StreamHotelsResponse = new StreamHotelsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListHotelsRequest$Type extends MessageType<ListHotelsRequest> {
    constructor() {
        super("hotel.v1beta.ListHotelsRequest", [
            { no: 1, name: "parent", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "page_size", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "page_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListHotelsRequest>): ListHotelsRequest {
        const message = { parent: "", pageSize: 0, pageToken: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListHotelsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListHotelsRequest): ListHotelsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string parent */ 1:
                    message.parent = reader.string();
                    break;
                case /* int32 page_size */ 2:
                    message.pageSize = reader.int32();
                    break;
                case /* string page_token */ 3:
                    message.pageToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListHotelsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string parent = 1; */
        if (message.parent !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.parent);
        /* int32 page_size = 2; */
        if (message.pageSize !== 0)
            writer.tag(2, WireType.Varint).int32(message.pageSize);
        /* string page_token = 3; */
        if (message.pageToken !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.pageToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hotel.v1beta.ListHotelsRequest
 */
export const ListHotelsRequest = new ListHotelsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListHotelsResponse$Type extends MessageType<ListHotelsResponse> {
    constructor() {
        super("hotel.v1beta.ListHotelsResponse", [
            { no: 1, name: "hotels", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Hotel },
            { no: 2, name: "next_page_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListHotelsResponse>): ListHotelsResponse {
        const message = { hotels: [], nextPageToken: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListHotelsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListHotelsResponse): ListHotelsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated hotel.v1beta.Hotel hotels */ 1:
                    message.hotels.push(Hotel.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string next_page_token */ 2:
                    message.nextPageToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListHotelsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated hotel.v1beta.Hotel hotels = 1; */
        for (let i = 0; i < message.hotels.length; i++)
            Hotel.internalBinaryWrite(message.hotels[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string next_page_token = 2; */
        if (message.nextPageToken !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.nextPageToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hotel.v1beta.ListHotelsResponse
 */
export const ListHotelsResponse = new ListHotelsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetHotelRequest$Type extends MessageType<GetHotelRequest> {
    constructor() {
        super("hotel.v1beta.GetHotelRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetHotelRequest>): GetHotelRequest {
        const message = { name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetHotelRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetHotelRequest): GetHotelRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetHotelRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hotel.v1beta.GetHotelRequest
 */
export const GetHotelRequest = new GetHotelRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HotelResponse$Type extends MessageType<HotelResponse> {
    constructor() {
        super("hotel.v1beta.HotelResponse", [
            { no: 1, name: "hotel", kind: "message", T: () => Hotel }
        ]);
    }
    create(value?: PartialMessage<HotelResponse>): HotelResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HotelResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HotelResponse): HotelResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* hotel.v1beta.Hotel hotel */ 1:
                    message.hotel = Hotel.internalBinaryRead(reader, reader.uint32(), options, message.hotel);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HotelResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* hotel.v1beta.Hotel hotel = 1; */
        if (message.hotel)
            Hotel.internalBinaryWrite(message.hotel, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hotel.v1beta.HotelResponse
 */
export const HotelResponse = new HotelResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateHotelRequest$Type extends MessageType<CreateHotelRequest> {
    constructor() {
        super("hotel.v1beta.CreateHotelRequest", [
            { no: 1, name: "parent", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "hotel_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "hotel", kind: "message", T: () => Hotel }
        ]);
    }
    create(value?: PartialMessage<CreateHotelRequest>): CreateHotelRequest {
        const message = { parent: "", hotelId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateHotelRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateHotelRequest): CreateHotelRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string parent */ 1:
                    message.parent = reader.string();
                    break;
                case /* string hotel_id */ 2:
                    message.hotelId = reader.string();
                    break;
                case /* hotel.v1beta.Hotel hotel */ 3:
                    message.hotel = Hotel.internalBinaryRead(reader, reader.uint32(), options, message.hotel);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateHotelRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string parent = 1; */
        if (message.parent !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.parent);
        /* string hotel_id = 2; */
        if (message.hotelId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.hotelId);
        /* hotel.v1beta.Hotel hotel = 3; */
        if (message.hotel)
            Hotel.internalBinaryWrite(message.hotel, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hotel.v1beta.CreateHotelRequest
 */
export const CreateHotelRequest = new CreateHotelRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateHotelRequest$Type extends MessageType<UpdateHotelRequest> {
    constructor() {
        super("hotel.v1beta.UpdateHotelRequest", [
            { no: 1, name: "hotel", kind: "message", T: () => Hotel }
        ]);
    }
    create(value?: PartialMessage<UpdateHotelRequest>): UpdateHotelRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateHotelRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateHotelRequest): UpdateHotelRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* hotel.v1beta.Hotel hotel */ 1:
                    message.hotel = Hotel.internalBinaryRead(reader, reader.uint32(), options, message.hotel);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateHotelRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* hotel.v1beta.Hotel hotel = 1; */
        if (message.hotel)
            Hotel.internalBinaryWrite(message.hotel, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hotel.v1beta.UpdateHotelRequest
 */
export const UpdateHotelRequest = new UpdateHotelRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteHotelRequest$Type extends MessageType<DeleteHotelRequest> {
    constructor() {
        super("hotel.v1beta.DeleteHotelRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteHotelRequest>): DeleteHotelRequest {
        const message = { name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteHotelRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteHotelRequest): DeleteHotelRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteHotelRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hotel.v1beta.DeleteHotelRequest
 */
export const DeleteHotelRequest = new DeleteHotelRequest$Type();
/**
 * @generated ServiceType for protobuf service hotel.v1beta.HotelService
 */
export const HotelService = new ServiceType("hotel.v1beta.HotelService", [
    { name: "ListHotels", options: {}, I: ListHotelsRequest, O: ListHotelsResponse },
    { name: "GetHotel", options: {}, I: GetHotelRequest, O: HotelResponse },
    { name: "CreateHotel", options: {}, I: CreateHotelRequest, O: HotelResponse },
    { name: "UpdateHotel", options: {}, I: UpdateHotelRequest, O: HotelResponse },
    { name: "DeleteHotel", options: {}, I: DeleteHotelRequest, O: HotelResponse },
    { name: "UpdateDate", options: {}, I: UpdateDateRequest, O: HotelResponse },
    { name: "StreamHotels", serverStreaming: true, options: {}, I: StreamHotelsRequest, O: StreamHotelsResponse }
]);
/**
 * @generated ServiceType for protobuf service hotel.v1beta.FieldService
 */
export const FieldService = new ServiceType("hotel.v1beta.FieldService", [
    { name: "AddField", options: {}, I: AddFieldRequest, O: HotelResponse },
    { name: "RemoveField", options: {}, I: RemoveFieldRequest, O: HotelResponse }
]);
/**
 * @generated ServiceType for protobuf service hotel.v1beta.UsageService
 */
export const UsageService = new ServiceType("hotel.v1beta.UsageService", [
    { name: "Using", options: {}, I: UsageRequest, O: UsageResponse },
    { name: "UsingStream", serverStreaming: true, options: {}, I: UsageRequest, O: UsageResponse }
]);
