// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "reservation/v1alpha/reservation.proto" (package "reservation", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message reservation.Reservation
 */
export interface Reservation {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: int32 hotelId = 3;
     */
    hotelId: number;
    /**
     * @generated from protobuf field: int32 roomId = 4;
     */
    roomId: number;
    /**
     * @generated from protobuf field: string checkInDate = 5;
     */
    checkInDate: string;
    /**
     * @generated from protobuf field: string checkOutDate = 6;
     */
    checkOutDate: string;
}
/**
 * @generated from protobuf message reservation.GetReservationRequest
 */
export interface GetReservationRequest {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
}
/**
 * @generated from protobuf message reservation.ListReservationsRequest
 */
export interface ListReservationsRequest {
    /**
     * @generated from protobuf field: int32 hotelId = 1;
     */
    hotelId: number;
    /**
     * @generated from protobuf field: int32 roomId = 2;
     */
    roomId: number;
    /**
     * @generated from protobuf field: string checkInDate = 3;
     */
    checkInDate: string;
    /**
     * @generated from protobuf field: string checkOutDate = 4;
     */
    checkOutDate: string;
}
/**
 * @generated from protobuf message reservation.ListReservationsResponse
 */
export interface ListReservationsResponse {
    /**
     * @generated from protobuf field: repeated reservation.Reservation reservations = 1;
     */
    reservations: Reservation[];
}
/**
 * @generated from protobuf message reservation.CreateReservationRequest
 */
export interface CreateReservationRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: int32 hotelId = 2;
     */
    hotelId: number;
    /**
     * @generated from protobuf field: int32 roomId = 3;
     */
    roomId: number;
    /**
     * @generated from protobuf field: string checkInDate = 4;
     */
    checkInDate: string;
    /**
     * @generated from protobuf field: string checkOutDate = 5;
     */
    checkOutDate: string;
}
/**
 * @generated from protobuf message reservation.UpdateReservationRequest
 */
export interface UpdateReservationRequest {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: int32 hotelId = 3;
     */
    hotelId: number;
    /**
     * @generated from protobuf field: int32 roomId = 4;
     */
    roomId: number;
    /**
     * @generated from protobuf field: string checkInDate = 5;
     */
    checkInDate: string;
    /**
     * @generated from protobuf field: string checkOutDate = 6;
     */
    checkOutDate: string;
}
/**
 * @generated from protobuf message reservation.DeleteReservationRequest
 */
export interface DeleteReservationRequest {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
}
/**
 * @generated from protobuf message reservation.DeleteReservationResponse
 */
export interface DeleteReservationResponse {
    /**
     * @generated from protobuf field: reservation.Reservation reservation = 1;
     */
    reservation?: Reservation;
}
// @generated message type with reflection information, may provide speed optimized methods
class Reservation$Type extends MessageType<Reservation> {
    constructor() {
        super("reservation.Reservation", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "hotelId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "roomId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "checkInDate", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "checkOutDate", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Reservation>): Reservation {
        const message = { id: 0, name: "", hotelId: 0, roomId: 0, checkInDate: "", checkOutDate: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Reservation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Reservation): Reservation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* int32 hotelId */ 3:
                    message.hotelId = reader.int32();
                    break;
                case /* int32 roomId */ 4:
                    message.roomId = reader.int32();
                    break;
                case /* string checkInDate */ 5:
                    message.checkInDate = reader.string();
                    break;
                case /* string checkOutDate */ 6:
                    message.checkOutDate = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Reservation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* int32 hotelId = 3; */
        if (message.hotelId !== 0)
            writer.tag(3, WireType.Varint).int32(message.hotelId);
        /* int32 roomId = 4; */
        if (message.roomId !== 0)
            writer.tag(4, WireType.Varint).int32(message.roomId);
        /* string checkInDate = 5; */
        if (message.checkInDate !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.checkInDate);
        /* string checkOutDate = 6; */
        if (message.checkOutDate !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.checkOutDate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message reservation.Reservation
 */
export const Reservation = new Reservation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetReservationRequest$Type extends MessageType<GetReservationRequest> {
    constructor() {
        super("reservation.GetReservationRequest", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetReservationRequest>): GetReservationRequest {
        const message = { id: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetReservationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetReservationRequest): GetReservationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetReservationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message reservation.GetReservationRequest
 */
export const GetReservationRequest = new GetReservationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListReservationsRequest$Type extends MessageType<ListReservationsRequest> {
    constructor() {
        super("reservation.ListReservationsRequest", [
            { no: 1, name: "hotelId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "roomId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "checkInDate", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "checkOutDate", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListReservationsRequest>): ListReservationsRequest {
        const message = { hotelId: 0, roomId: 0, checkInDate: "", checkOutDate: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListReservationsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListReservationsRequest): ListReservationsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 hotelId */ 1:
                    message.hotelId = reader.int32();
                    break;
                case /* int32 roomId */ 2:
                    message.roomId = reader.int32();
                    break;
                case /* string checkInDate */ 3:
                    message.checkInDate = reader.string();
                    break;
                case /* string checkOutDate */ 4:
                    message.checkOutDate = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListReservationsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 hotelId = 1; */
        if (message.hotelId !== 0)
            writer.tag(1, WireType.Varint).int32(message.hotelId);
        /* int32 roomId = 2; */
        if (message.roomId !== 0)
            writer.tag(2, WireType.Varint).int32(message.roomId);
        /* string checkInDate = 3; */
        if (message.checkInDate !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.checkInDate);
        /* string checkOutDate = 4; */
        if (message.checkOutDate !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.checkOutDate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message reservation.ListReservationsRequest
 */
export const ListReservationsRequest = new ListReservationsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListReservationsResponse$Type extends MessageType<ListReservationsResponse> {
    constructor() {
        super("reservation.ListReservationsResponse", [
            { no: 1, name: "reservations", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Reservation }
        ]);
    }
    create(value?: PartialMessage<ListReservationsResponse>): ListReservationsResponse {
        const message = { reservations: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListReservationsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListReservationsResponse): ListReservationsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated reservation.Reservation reservations */ 1:
                    message.reservations.push(Reservation.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListReservationsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated reservation.Reservation reservations = 1; */
        for (let i = 0; i < message.reservations.length; i++)
            Reservation.internalBinaryWrite(message.reservations[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message reservation.ListReservationsResponse
 */
export const ListReservationsResponse = new ListReservationsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateReservationRequest$Type extends MessageType<CreateReservationRequest> {
    constructor() {
        super("reservation.CreateReservationRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "hotelId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "roomId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "checkInDate", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "checkOutDate", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateReservationRequest>): CreateReservationRequest {
        const message = { name: "", hotelId: 0, roomId: 0, checkInDate: "", checkOutDate: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateReservationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateReservationRequest): CreateReservationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* int32 hotelId */ 2:
                    message.hotelId = reader.int32();
                    break;
                case /* int32 roomId */ 3:
                    message.roomId = reader.int32();
                    break;
                case /* string checkInDate */ 4:
                    message.checkInDate = reader.string();
                    break;
                case /* string checkOutDate */ 5:
                    message.checkOutDate = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateReservationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* int32 hotelId = 2; */
        if (message.hotelId !== 0)
            writer.tag(2, WireType.Varint).int32(message.hotelId);
        /* int32 roomId = 3; */
        if (message.roomId !== 0)
            writer.tag(3, WireType.Varint).int32(message.roomId);
        /* string checkInDate = 4; */
        if (message.checkInDate !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.checkInDate);
        /* string checkOutDate = 5; */
        if (message.checkOutDate !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.checkOutDate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message reservation.CreateReservationRequest
 */
export const CreateReservationRequest = new CreateReservationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateReservationRequest$Type extends MessageType<UpdateReservationRequest> {
    constructor() {
        super("reservation.UpdateReservationRequest", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "hotelId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "roomId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "checkInDate", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "checkOutDate", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateReservationRequest>): UpdateReservationRequest {
        const message = { id: 0, name: "", hotelId: 0, roomId: 0, checkInDate: "", checkOutDate: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateReservationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateReservationRequest): UpdateReservationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* int32 hotelId */ 3:
                    message.hotelId = reader.int32();
                    break;
                case /* int32 roomId */ 4:
                    message.roomId = reader.int32();
                    break;
                case /* string checkInDate */ 5:
                    message.checkInDate = reader.string();
                    break;
                case /* string checkOutDate */ 6:
                    message.checkOutDate = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateReservationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* int32 hotelId = 3; */
        if (message.hotelId !== 0)
            writer.tag(3, WireType.Varint).int32(message.hotelId);
        /* int32 roomId = 4; */
        if (message.roomId !== 0)
            writer.tag(4, WireType.Varint).int32(message.roomId);
        /* string checkInDate = 5; */
        if (message.checkInDate !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.checkInDate);
        /* string checkOutDate = 6; */
        if (message.checkOutDate !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.checkOutDate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message reservation.UpdateReservationRequest
 */
export const UpdateReservationRequest = new UpdateReservationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteReservationRequest$Type extends MessageType<DeleteReservationRequest> {
    constructor() {
        super("reservation.DeleteReservationRequest", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteReservationRequest>): DeleteReservationRequest {
        const message = { id: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteReservationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteReservationRequest): DeleteReservationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteReservationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message reservation.DeleteReservationRequest
 */
export const DeleteReservationRequest = new DeleteReservationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteReservationResponse$Type extends MessageType<DeleteReservationResponse> {
    constructor() {
        super("reservation.DeleteReservationResponse", [
            { no: 1, name: "reservation", kind: "message", T: () => Reservation }
        ]);
    }
    create(value?: PartialMessage<DeleteReservationResponse>): DeleteReservationResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteReservationResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteReservationResponse): DeleteReservationResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* reservation.Reservation reservation */ 1:
                    message.reservation = Reservation.internalBinaryRead(reader, reader.uint32(), options, message.reservation);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteReservationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* reservation.Reservation reservation = 1; */
        if (message.reservation)
            Reservation.internalBinaryWrite(message.reservation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message reservation.DeleteReservationResponse
 */
export const DeleteReservationResponse = new DeleteReservationResponse$Type();
/**
 * @generated ServiceType for protobuf service reservation.ReservationCRUDService
 */
export const ReservationCRUDService = new ServiceType("reservation.ReservationCRUDService", [
    { name: "GetReservation", options: {}, I: GetReservationRequest, O: Reservation },
    { name: "ListReservations", options: {}, I: ListReservationsRequest, O: ListReservationsResponse },
    { name: "CreateReservation", options: {}, I: CreateReservationRequest, O: Reservation },
    { name: "UpdateReservation", options: {}, I: UpdateReservationRequest, O: Reservation },
    { name: "DeleteReservation", options: {}, I: DeleteReservationRequest, O: DeleteReservationResponse }
]);
